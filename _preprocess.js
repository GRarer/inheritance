const fs = require('fs');

const totals = {};

function makeDirectoryReferences(dir, ...lines) {
  let fulldir = `_source/${dir}`;
  let files = fs.readdirSync(fulldir);
  files = files.filter(x => x.endsWith('.ts'));
  totals[dir] = files.length;
  lines = lines.concat(files.map(x => `/// <reference path="${dir}/${x}" />`));
  let file = lines.join('\n');
  fs.writeFileSync(fulldir + '.ts', file + '\n');
}

// generate NoteResources.ts from the .txt files in assets/notes
function generateNoteResources() {

  let notesDir = "assets/notes/";
  let files = fs.readdirSync(notesDir);
  files = files.filter(x => x.endsWith('.txt'));
  
  let codeLines= [];
  codeLines.push("// this file contains the titles and contents for each unlockable note");
  codeLines.push("// this file is generated by the pre-processor from .txt files in the assets/notes directory");
  codeLines.push("function loadAllNoteResources() {") 

  files.forEach(function(txtfile) {
    txtfile = notesDir + txtfile;

    let file = fs.readFileSync(txtfile, 'utf-8');
    let lines = file.split("\n");

    
    let title = lines.shift(); // get title (first line of txt file)
    title = title.replace(/\r?\n|\r/g, ""); // remove newlines from title

    let content = lines.join(""); // join content lines with the escape sequence for a new line, not a literal new line

    let instruction = "  NotePool.loadNote(\"" + title + "\", \"" + content + "\");";
    instruction = instruction.replace(/\r?\n|\r/g, "\\n"); // escape all newlines

    codeLines.push(instruction);
  });
  codeLines.push("}");

  let resourceFile = "_source/NoteResources.ts"

  // remove previously generated code
  if (fs.existsSync(resourceFile)) { 
    fs.unlinkSync(resourceFile);
  }

  // write generated code to file
  codeLines.forEach((element) => {
    fs.appendFileSync(resourceFile, element + "\n");
  });

}

makeDirectoryReferences('effects');
makeDirectoryReferences('tools');
makeDirectoryReferences('modifiers');
makeDirectoryReferences('characters');
makeDirectoryReferences('enemies');
makeDirectoryReferences('statuses');
makeDirectoryReferences('traits');

generateNoteResources();

console.log('The game contains:');
const keys = Object.keys(totals);
keys.forEach(x => console.log(`    ${totals[x]} ${x}.`));
console.log(`There are ${Math.pow(2, totals.modifiers) * totals.tools} possible tools.`);
